{
	// Doesn't work with Interactive Linter? So copy rules from above, here.
	//"extends": "../../../.eslintrc",
	"env":
	{
		"jasmine": true     // adds all of the Jasmine testing global variables for version 1.3 and 2.0
	},
	"globals":
	{
		"$": false,          // jQuery
		"_": false,          // Lodash (or Underscore)
		"moment": false
	}

	,
	"rules":
	{
		//# Style #

		"indent": [ 2, "tab" ],
		"linebreak-style": [ 2, "unix" ],
		"semi": [ 2, "always" ],

		"comma-spacing": [ 1, { "before": false, "after": true } ],
		"key-spacing": [ 1, { "beforeColon": false, "afterColon": true } ],
		"no-irregular-whitespace": 1,  // disallow irregular whitespace outside of strings and comments


		//# Possible errors #

		"no-cond-assign": 2,           // disallow assignment in conditional expressions
		"no-dupe-args": 2,             // disallow duplicate arguments in functions
		"no-dupe-keys": 2,             // disallow duplicate keys when creating object literals
		"no-duplicate-case": 2,        // disallow a duplicate case label
		"no-extra-parens": 1,          // disallow unnecessary parentheses (off by default)
		"no-extra-semi": 1,            // disallow unnecessary semicolons
		"no-func-assign": 2,           // disallow overwriting functions written as function declarations
		"no-unreachable": 2,           // disallow unreachable statements after a return, throw, continue, or break statement
		"use-isnan": 2,                // disallow comparisons with the value NaN
		"valid-typeof": 2,             // Ensure that the results of typeof are compared against a valid string

		"no-empty-character-class": 2, // disallow the use of empty character classes in regular expressions
		"no-invalid-regexp": 2,        // disallow invalid regular expression strings in the RegExp constructor


		//# Best practices #

		"curly": 0,                 // specify curly brace conventions for all control statements
		"eqeqeq": [ 2, "smart" ],   // require the use of === and !==
		"no-else-return": 2,        // disallow else after a return in an if (off by default)
		"no-floating-decimal": 1,   // disallow the use of leading or trailing decimal points in numeric literals (off by default)
		"no-loop-func": 2,          // disallow creation of functions within loops
		"no-octal-escape": 1,       // disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
		"no-octal": 1,              // disallow use of octal literals
		"no-redeclare": 2,          // disallow declaring the same variable more than once
		"no-return-assign": 2,      // disallow use of assignment in return statement
		"no-unused-expressions": 2, // disallow usage of expressions in statement position
		"yoda": 1,                  // require or disallow Yoda conditions


		//# Variables #

		"no-shadow-restricted-names": 1,  // disallow shadowing of names such as arguments
		"no-unused-vars": [ 2, { "args": "none" } ], // disallow declaration of variables that are not used in the code
		"no-undef": 2,                    // disallow use of undeclared variables unless mentioned in a /*global */ block


		//# Strict Mode #

		"strict": [ 2, "function" ] // controls location of Use Strict Directives
	}
}
